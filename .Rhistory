arrange(Year) %>%
select(Year,Domestic_Total,Chinese_Total)
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
UsChinaCompare2 = UsChinaCompare %>%
gather(key = "Region", value = "Return", Total_Chinese_Gross, Domestic)
p = UsChinaCompare2 %>%
arrange(Return) %>%
select(Title, Region, Return,Domestic_Returns,China_Returns) %>%
ggplot(aes(x = Title, y = Return)) + geom_point(aes(color=Region))
ggplotly(p,tooltip = Title,Domestic_Returns,China_Returns)
p
runApp('IRAVILLARShinyApp')
UsChinaAlltime
View(UsChinaAlltime)
filter(Domestic != is.na(Domestic) -> UsChinaCompare
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
View(UsChinaCompare)
View(UsChinaCompare)
UsChinaCompare2
View(UsChinaCompare2)
View(UsChinaCompare2)
p = UsChinaCompare2 %>%
arrange(Return) %>%
select(Title, Region, Return, Domestic_Returns, China_Returns)
p
shiny::runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp()
runApp()
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp()
runApp('IRAVILLARShinyApp')
View(UsChinaCompare)
View(UsChinaCompare)
View(UsChinaCompare2)
View(UsChinaCompare2)
UsChinaCompare3 = UsChinaCompare2 %>%
select(Title,Total_Worldwide_Gross,Domestic_Returns,Overseas,China_Returns)
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare2 %>%
select(Title,Total_Worldwide_Gross,Domestic_Returns,Overseas,China_Returns)
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
shiny::runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
rsconnect::setAccountInfo(name='iravillar', token='C39D0914F0FEB4A4A725D300860B7B8C', secret='+uwolSmHf6kt2kaiSMqrShHLPWPbLnBT0l2jmn9h')
runApp('IRAVILLARShinyApp')
temp
temp %>%
select(Domestic) -> DomesticMean
DomesticMean = as.vector(DomesticMean)
DomesticMean
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
temp %>%
filter(OverseasTotalRegion == "China") %>%
select(Overseasfactor) ->ChineseMean
temp %>%
filter(OverseasTotalRegion=="all_other_overseas_gross") %>%
select(Overseasfactor)-> OverseasMean
OverseasMean = as.vector(OverseasMean$Overseasfactor)
ChineseMean = as.vector(ChineseMean$Overseasfactor)
t.test(ChineseMean,OverseasMean,alternative = "two.sided")
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
ChineseMean
DomesticMean = as.matrix(DomesticMean)
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
t.test(ChineseMean,OverseasMean,alternative = "two.sided")
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
hist(ChineseMean)
temp %>%
filter(OverseasTotalRegion == "China") %>%
filter(Overseasfactor != 1)
OverseasMean = as.vector(OverseasMean$Overseasfactor)
t.test(ChineseMean,OverseasMean,alternative = "two.sided")
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
hist(ChineseMean)
ChineseMean
runApp('IRAVILLARShinyApp')
temp %>%
filter(OverseasTotalRegion == "China") %>%
filter(Overseasfactor != 1)
temp %>%
filter(OverseasTotalRegion == "China") %>%
filter(Overseasfactor != 1) %>%
select(Overseasfactor) ->ChineseMean
temp %>%
filter(OverseasTotalRegion=="all_other_overseas_gross") %>%
select(Overseasfactor)-> OverseasMean
temp %>%
select(Domestic) -> DomesticMean
OverseasMean = as.vector(OverseasMean$Overseasfactor)
ChineseMean = as.vector(ChineseMean$Overseasfactor)
DomesticMean = as.matrix(DomesticMean)
t.test(ChineseMean,OverseasMean,alternative = "two.sided")
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
hist(ChineseMean)
ChineseMean
plot(ChineseMean)
lineplot(ChineseMean)
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
plot(density(ChineseMean))
boxplot(heights, main = "Sample Distribution of Heights")
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
plot(density(DomesticMean))
lines(density(SAT.Fall), col = "blue")
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
plot(density(DomesticMean))
lines(density(ChineseMean))
lines(density(ChineseMean),col="red")
plot(density(ChineseMean))
lines(density(DomesticMean),col="blue")
plot(density(ChineseMean),col="red")
lines(density(DomesticMean),col="blue")
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
ChineseMean
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Year = as.factor(Year)) %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = China)
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Year = as.character(Year)) %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = China)
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
t.test(ChineseMean,OverseasMean,alternative = "two.sided")
t.test(ChineseMean,DomesticMean,alternative = "two.sided")
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
HTML(paste('<br/><br/> We would want to find the statistical significance between China and the rest of the overseas returns,
but without individual data per country, it would be unfair. The next best option would be to see the significance between
US and China returns. <br/><br/> <p align="center"><img src="DensityCharts.png", width = "40%"><br/>
<font size="1"><i>DENSITY CHART: China returns are colored RED while US returns are in BLUE</i></p></font><br/>
A two sampled T-test shows that their means are significantly different. <br/> <p align="center">
<img src="Ttests.png",width="10%"></p>
'))
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
shiny::runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
hello
shiny::runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
View(cs)
runApp('IRAVILLARShinyApp')
cs2 = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
setwd("~/Downloads/IRAVILLARShinyApp")
cs2 = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
View(cs2)
cs %>%
filter(Indicators == 2014) %>%
pivot_longer(names_to = "name",values_to = "values") -> cs2
cs %>%
filter(Indicators == 2014) %>%
pivot_longer(., names_to = "name",values_to = "values") -> cs2
cs %>%
filter(Indicators == 2014) %>%
pivot_longer(., names_to = "name",values_to = "values") -> cs2
?pivot_longer
cs %>%
filter(Indicators == 2014) %>%
pivot_longer(., c(Feature_Films,Cartoons,Science_Films,Documentaries),
names_to = "name" ,values_to = "values") -> cs2
cs2
max_value <- max(c2$values)
max_value <- max(cs2$values)
max_state <-cs$name[cs2$name==max_value]
runApp()
runApp()
cs %>%
filter(Indicators == 2014) %>%
pivot_longer(., c(Feature_Films,Cartoons,Science_Films,Documentaries),
names_to = "name" ,values_to = "values") -> cs2
runApp()
cs2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
opendf
runApp()
opendf
opendf = data.frame(
Title = UsChinaFiltered$Title,
Domestic_Opening = UsChinaFiltered$Domestic.Opening,
"Chinese_Opening" = UsChinaFiltered$Chinese.Opening
)
UsChina %>%
filter(Studio == "BV") %>%
arrange(-Worldwide.Opening) %>%
slice(1:9) -> UsChinaFiltered
opendf = data.frame(
Title = UsChinaFiltered$Title,
Domestic_Opening = UsChinaFiltered$Domestic.Opening,
"Chinese_Opening" = UsChinaFiltered$Chinese.Opening
)
opendf
runApp()
min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
runApp()
runApp()
runApp()
runApp()
opendf[Domestic_Opening]
opendf[Domestic_Opening]
UsChina %>%
filter(Studio == "BV") %>%
arrange(-Worldwide.Opening) %>%
slice(1:9) -> UsChinaFiltered
opendf = data.frame(
Title = UsChinaFiltered$Title,
Domestic_Opening = UsChinaFiltered$Domestic.Opening,
Chinese_Opening = UsChinaFiltered$Chinese.Opening
)
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), Chinese_Opening, Domestic_Opening)
opendf
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), "CHINA", "US")
min_film <- ifelse(min_state == "CHINA", opendf$Title[opendf$Chinese_Opening == min_value], opendf$Title[opendf$Domestic_Opening == min_value])
runApp()
min_film <- ifelse(min_state == "CHINA", opendf$Title[opendf$Chinese_Opening == min_value], opendf$Title[opendf$Domestic_Opening == min_value])
min_film
runApp()
runApp()
min_film <- ifelse(min_state == "CHINA", opendf$Title[opendf$Chinese_Opening == min_value], opendf$Title[opendf$Domestic_Opening == min_value])
min_film
min_film <- opendf$Title[ifelse(min_state == "CHINA", opendf$Title[opendf$Chinese_Opening == min_value], opendf$Title[opendf$Domestic_Opening == min_value])]
min_film
UsChina %>%
filter(Studio == "BV" ) %>%
arrange(-Worldwide.Opening) %>%
mutate(Title = as.character(Title)) %>%
slice(1:9) -> UsChinaFiltered
opendf = data.frame(
Title = UsChinaFiltered$Title,
Domestic_Opening = UsChinaFiltered$Domestic.Opening,
Chinese_Opening = UsChinaFiltered$Chinese.Opening
)
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), "CHINA", "US")
min_film <- opendf$Title[ifelse(min_state == "CHINA", opendf$Title[opendf$Chinese_Opening == min_value], opendf$Title[opendf$Domestic_Opening == min_value])]
min_film
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
opendf
runApp()
runApp()
min_film
runApp()
min_film <- opendf$Title[ifelse(min_state == "CHINA", opendf$Title[Chinese.Opening == min_value], opendf$Title[Domestic.Opening == min_value])]
min_film
runApp()
opendf = data.frame(
Title = as.character(UsChinaFiltered$Title),
Domestic_Opening = UsChinaFiltered$Domestic.Opening,
Chinese_Opening = UsChinaFiltered$Chinese.Opening
)
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), "CHINA", "US")
min_film <- opendf$Title[ifelse(min_state == "CHINA", opendf$Title[Chinese.Opening == min_value], opendf$Title[Domestic.Opening == min_value])]
min_film
min_state
min_value
opendf
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), "CHINA", "US")
min_film <- ifelse(min_state == "CHINA", opendf$Title[Chinese.Opening == min_value], opendf$Title[Domestic.Opening == min_value])
min_film
runApp()
min_value <- min(min(opendf$Domestic_Opening),min(opendf$Chinese_Opening))
min_state <- ifelse(min(opendf$Domestic_Opening) > min(opendf$Chinese_Opening), "CHINA", "US")
min_film <- ifelse(min_state == "CHINA", opendf$Title[Chinese.Opening[min_value]], opendf$Title[Domestic.Opening[min_value]])
min_film
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
color %in% validColors
shinyUI(
dashboardPage(skin="purple", dashboardHeader(title="Hollywood Movies and China", titleWidth = "350"),
dashboardSidebar(sidebarUserPanel(""),
sidebarMenu(
menuItem("About the Project", tabName = "AbouttheProject",icon=icon("info-circle")),
menuItem("Author Page",tabName="AboutMe",icon=icon("address-card")),
menuItem("Statistics",tabName = "Stats",icon=icon("table")),
menuItem("Overall Percentages",tabName = "Pie",icon=icon("chart-pie")),
menuItem("Opening Comparison",tabName = "Bar",icon=icon("database")),
menuItem("Trends Over Time",tabName = "LineChart",icon=icon("chart-line")),
menuItem("Returns per Film",tabName = "Scatter",icon=icon("dot-circle")),
menuItem("Conclusion",tabName = "Conclusion",icon=icon("film"))
)),
dashboardBody(
tabItems(
tabItem(tabName="AbouttheProject",
h1("Hollywood Movies and China", align = "center"),
HTML('<center><img src="GreatWall.jpg" width="400"></center>'),
htmlOutput("openingtext")
),
tabItem(tabName="AboutMe",
h1("Author", align = "center"),
HTML('<center><img src="iraheadshot.png"></center>'),
htmlOutput("abouttext"),
fluidRow( img(src="LinkedInLogo.png", height ="5%", width = "5%"), uiOutput("LItab"),
img(src="githublogo.svg", height="5%", width = "5%"), uiOutput("gittab"),align="center")
),
tabItem(tabName="Bar",
selectInput("studio", label = h3("Select Studio"),
choices = list("Disney" = "BV",
"Warner Brothers" = "WB",
"Universal" = "Uni.",
"Paramount" = "Par.",
"20th Century Fox" = "Fox",
"Sony" = "Sony"),selected = "BV"),
fluidRow(infoBoxOutput("maxBox"), infoBoxOutput("minBox")),
fluidRow(htmlOutput("BarChart"))
validColors
),
tabItem(tabName = "Pie",
sliderInput("select", label = h3("Select Year"), min = 2000,
max = 2018, value = 2000),
fluidRow( column(6, htmlOutput("PieChart")),
column(6, htmlOutput("PieChartOverseas"))),
hr(),
fluidRow(
column(4, verbatimTextOutput("value")))
),
tabItem(tabName = "LineChart",
fluidRow(
column(6,
sliderInput("YearRange", label = h3("Year Range\n for US/China Yearly Gross - Comparison"), min = 1990,
max = 2018, value = c(1990, 2018))
),
column(6,
sliderInput("CinemaRange",label=h3("Year Range\n for Number of Screens in China"), min =2005,
max = 2017, value = c(2005, 2017)))
),
fluidRow(column(8, htmlOutput("Line")),
column(8,htmlOutput("CinemaLine")))
),
tabItem(tabName = "Scatter",
h3("US and China All Time Returns per Film - Value in Millions ($)"),
h5("Return of '1' means no information was available"),
plotlyOutput("ScatterChart"),
h3("Search for a Particular Film:"),
fluidRow(column(6, DT::dataTableOutput("table2")))
),
tabItem(tabName = "Stats",
h3("Some Statistics on the Chinese Film Industry"),
h4("Locally produced films"),
fluidRow(htmlOutput("StatChart"))
),
tabItem(tabName = "Conclusion",
h1("Conclusion", align = "center"),
HTML('<center><img src="WorldMap.jpg" width="400"></center>'),
htmlOutput("closingtext")
)
))
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
