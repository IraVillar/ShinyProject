UsChinaCompare2
View(UsChinaCompare2)
View(UsChinaCompare2)
UsChinaCompare %>%
group_by(Year) %>%
filter(Year %in% c(2006:2019)) %>%
mutate(Domestic_Total = sum(Domestic)) %>%
mutate(Chinese_Total = sum(Total_Chinese_Gross)) %>%
filter(Domestic_Total != is.na(Domestic_Total)) %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross) %>%
arrange(Year) %>%
select(Year,Domestic_Total,Chinese_Total)
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
UsChinaCompare2 = UsChinaCompare %>%
gather(key = "Region", value = "Return", Total_Chinese_Gross, Domestic)
runApp('IRAVILLARShinyApp')
UsChinaCompare2
View(UsChinaCompare2)
p = UsChinaCompare2 %>%
arrange(Return) %>%
select(Title, Region, Return, Domestic_Returns,China_Returns) %>%
ggplot(aes(x = Title, y = Return)) + geom_point(aes(color=Region))
ggplotly(p,hoverinfo="Title")
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
UsChinaCompare2 = UsChinaCompare %>%
gather(key = "Region", value = "Return", Total_Chinese_Gross, Domestic)
runApp('IRAVILLARShinyApp')
UsChinaCompare2
View(UsChinaCompare2)
runApp('IRAVILLARShinyApp')
UsChinaAlltime
UsChinaAlltime %>%
select(-Rank.y) -> UsChinaCompare
UsChinaCompare %>%
group_by(Year) %>%
filter(Year %in% c(2006:2019)) %>%
mutate(Domestic_Total = sum(Domestic)) %>%
mutate(Chinese_Total = sum(Total_Chinese_Gross)) %>%
filter(Domestic_Total != is.na(Domestic_Total)) %>%
arrange(Year) %>%
select(Year,Domestic_Total,Chinese_Total)
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross)
UsChinaCompare2 = UsChinaCompare %>%
gather(key = "Region", value = "Return", Total_Chinese_Gross, Domestic)
p = UsChinaCompare2 %>%
arrange(Return) %>%
select(Title, Region, Return,Domestic_Returns,China_Returns) %>%
ggplot(aes(x = Title, y = Return)) + geom_point(aes(color=Region))
ggplotly(p,tooltip = Title,Domestic_Returns,China_Returns)
p
runApp('IRAVILLARShinyApp')
UsChinaAlltime
View(UsChinaAlltime)
filter(Domestic != is.na(Domestic) -> UsChinaCompare
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
View(UsChinaCompare)
View(UsChinaCompare)
UsChinaCompare2
View(UsChinaCompare2)
View(UsChinaCompare2)
p = UsChinaCompare2 %>%
arrange(Return) %>%
select(Title, Region, Return, Domestic_Returns, China_Returns)
p
shiny::runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaAlltime
View(UsChinaCompare)
View(UsChinaAlltime)
View(Worldwide.Alltime)
View(UsChinaAlltime)
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
View(UsChinaAlltime)
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
group_by(Year) %>%
filter(Year %in% c(input$YearRange[1]:input$YearRange[2])) %>%
mutate(Domestic_Total = sum(Domestic)) %>%
mutate(Chinese_Total = sum(Total_Chinese_Gross)) %>%
filter(Domestic_Total != is.na(Domestic_Total)) %>%
arrange(Year) %>%
select(Year, Domestic_Total, Chinese_Total)
runApp('IRAVILLARShinyApp')
View(UsChinaAlltime)
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaCompare2
p
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaCompare$China_Returns = format(round(UsChinaCompare$China_Returns, 2), nsmall = 2)
install.packages("formattable")
library(formattable)
UsChinaCompare$China_Returns = formattable(UsChinaCompare$China_Returns, digits = 2, format = "f")
UsChinaCompare$China_Returns = formattable(UsChinaCompare$China_Returns, digits = 2, format = "f")
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%#.2f')
?sprintf
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%#.2f')
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%s')
China_Returns
UsChinaCompare$China_Returns
runApp('IRAVILLARShinyApp')
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%s')
UsChinaCompare$China_Returns
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%sd2')
UsChinaCompare$China_Returns
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = 'd2%s')
UsChinaCompare$China_Returns
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%s')
UsChinaCompare$China_Returns
runApp('IRAVILLARShinyApp')
UsChinaCompare$China_Returns
runApp('IRAVILLARShinyApp')
View(UsChinaAlltime2)
View(UsChinaAlltime2)
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%s', f=2)
UsChinaCompare$China_Returns
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%s', d=2)
UsChinaCompare$China_Returns
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%#.2f')
runApp('IRAVILLARShinyApp')
UsChinaCompare2 = UsChinaCompare %>%
gather(key = "Region", value = "Return", Total_Chinese_Gross, Domestic) %>%
arrange(-China_Returns)
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = Total_Chinese_Gross[Total_Chinese_Gross != 1])
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%#.2f')
UsChinaCompare$China_Returns = as.numeric(UsChinaCompare$China_Returns)
UsChinaCompare$China_Returns = sprintf(UsChinaCompare$China_Returns, fmt = '%#.2f')
UsChinaCompare$China_Returns
runApp('IRAVILLARShinyApp')
runApp()
runApp()
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
UsChinaAlltime %>%
mutate(China = ifelse(is.na(China),1,China)) %>%
select(Rank = Rank.x,-Rank.y,everything()) -> UsChinaAlltime
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
percpie
percpie
exceptChinadf
exceptChinadf = data.frame(rbind(overseas_others_df, domestic_opening),
stringsAsFactors = F)
temp
View(temp)
runApp('IRAVILLARShinyApp')
chinaoverall_df
chinaoverall_df = temp %>%
group_by(Year, OverseasTotalRegion) %>%
filter(Year == input$select) %>%
filter(OverseasTotalRegion == "Total_Chinese_Gross") %>%
summarise(sum(Overseasfactor))
domestic_opening
runApp('IRAVILLARShinyApp')
UsChinaCompare %>%
group_by(Year) %>%
filter(Year %in% c(2006:2019)) %>%
mutate(Domestic_Total = sum(Domestic)) %>%
mutate(Chinese_Total = sum(China)) %>%
# filter(Domestic_Total != is.na(Domestic_Total)) %>%
arrange(Year) %>%
select(Year,Domestic_Total,Chinese_Total)
UsChinaCompare = UsChinaCompare %>%
mutate(Domestic_Returns = Domestic) %>%
mutate(China_Returns = China)
UsChinaCompare %>%
group_by(Year) %>%
filter(Year %in% c(2006:2019)) %>%
mutate(Domestic_Total = sum(Domestic)) %>%
mutate(Chinese_Total = sum(China)) %>%
# filter(Domestic_Total != is.na(Domestic_Total)) %>%
arrange(Year) %>%
select(Year,Domestic_Total,Chinese_Total)
temp
domestic_opening
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
runApp('IRAVILLARShinyApp')
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
setwd("~/Downloads/IRAVILLARShinyApp")
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs
cs = cs %>% select (-X2018)
cs
t(cs)
cs = t(cs)
View(cs)
View(cs)
cs = as.datafram(t(cs))
cs = as.dataframe(t(cs))
cs = data.frame(t(cs))
View(cs)
View(cs)
t(cs)
class(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs = data.frame(cs)
t(cs)
class(cs)
cs$Indicators
cs$Indicators
cs$X2017
cs = t(cs)
class(cs)
cs = data.frame(cs)
class(cs)
View(cs)
cs$X1
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
class(cs)
cs
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
class(cs)
cs
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs)
class(cs)
View(cs)
View(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
View(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs %>%
gather(key="Year",value="numbers",X2017:X1999)
runApp()
runApp()
runApp()
co %>%
select(Title = Movie.Title, Chinese Opening = Opening, everything(),percent_of_total = X..of.Total, China = Total.Gross) -> co
co %>%
select(Title = Movie.Title, "Chinese Opening" = Opening, everything(),percent_of_total = X..of.Total, China = Total.Gross) -> co
runApp()
# China Cleaning ####
co = read.csv("ChinaOpening.csv",stringsAsFactors = FALSE)
co = tbl_df(co)
co %>%
select(Title = Movie.Title, "Chinese Opening" = Opening, everything(),percent_of_total = X..of.Total, China = Total.Gross) -> co
co
co$Chinese.Opening = Chinese.Opening = as.numeric(gsub("[\\$,]", "", co$"Chinese Opening"))
co$Chinese.Opening = "Chinese Opening" = as.numeric(gsub("[\\$,]", "", co$"Chinese Opening"))
co$"Chinese Opening" = "Chinese Opening" = as.numeric(gsub("[\\$,]", "", co$"Chinese Opening"))
co
co %>%
mutate(Chinese.Opening = "Chinese Opening" /1000000) %>%
mutate(China = China/1000000) %>%
mutate(percent_of_total = percent_of_total/10) -> co
co %>%
mutate("Chinese Opening" = "Chinese Opening" /1000000) %>%
mutate(China = China/1000000) %>%
mutate(percent_of_total = percent_of_total/10) -> co
co %>%
select("Chinese Opening" = Chinese.Opening)
# China Cleaning ####
co = read.csv("ChinaOpening.csv",stringsAsFactors = FALSE)
co = tbl_df(co)
co %>%
select(Title = Movie.Title, Chinese.Opening = Opening, everything(),percent_of_total = X..of.Total, China = Total.Gross) -> co
co$China = China = as.numeric(gsub("[\\$,]", "", co$China))
co$Chinese.Opening = Chinese.Opening = as.numeric(gsub("[\\$,]", "", co$Chinese.Opening))
co$percent_of_total = percent_of_total = as.numeric(gsub("[[:punct:]]","",co$percent_of_total))
co %>%
mutate(Chinese.Opening = Chinese.Opening /1000000) %>%
mutate(China = China/1000000) %>%
mutate(percent_of_total = percent_of_total/10) -> co
co %>%
select("Chinese Opening" = Chinese.Opening)
runApp()
runApp()
runApp()
runApp()
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs)
class(cs)
View(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs)
class(cs)
View(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-X2018)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs)
class(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
View(cs)
cs = cs %>% select (-Index)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs)
class(cs)
View(cs)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators))
class(cs)
Line <- gvisLineChart(cs)
plot(Line)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators)) %>%
arrange(-Year)
View(cs)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators)) %>%
arrange(-Indicators)
class(cs)
Line <- gvisLineChart(cs)
plot(Line)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators)) %>%
arrange(Indicators)
class(cs)
Line <- gvisLineChart(cs)
plot(Line)
View(cs)
runApp()
runApp()
runApp()
UsChinaCompare2
runApp()
runApp()
runApp()
runApp()
runApp()
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-Index)
cs = data.frame(cs)
cs = t(cs)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators)) %>%
arrange(Indicators) %>%
select()
class(cs)
View(cs)
View(cs)
runApp()
class(cs)
cs
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-Index)
cs = data.frame(cs)
cs = t(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-Index)
cs = data.frame(cs)
cs
cs = t(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = data.frame(cs)
cs = t(cs)
cs = cs %>% select (-Index)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-Index)
# cs = data.frame(cs)
cs = t(cs)
cs = read.csv("ChineseStats.csv",stringsAsFactors = FALSE)
cs = cs %>% select (-Index)
cs = data.frame(cs)
cs = cs %>% select(-2018)
cs = t(cs)
cs = data.frame(cs) %>%
filter(Indicators != is.na(Indicators)) %>%
arrange(Indicators)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cs)
View(cs)
runApp()
runApp()
runApp()
runApp()
View(cs)
runApp()
runApp()
runApp()
runApp()
runApp()
View(cs)
View(cs)
View(cs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
